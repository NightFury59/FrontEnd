Array.prototype.myMap = function (callback) {
  const retVal = [];

  for (let i = 0; i < this.length; i++) {
    retVal.push(callback(this[i], i, this))
  }


  return retVal;
};

Array.prototype.myFilter = function (callback) {
  const retVal = [];

  for (let i = 0; i < this.length; i++) {
    if (callback(this[i], i, this) === true) {
      retVal.push(this[i])
    }
  }

  return retVal;
};

Array.prototype.myReduce = function (callback, initialValue) {
  let accumulator = initialValue ?? this[0]
  let start = (initialValue == null) ? 1 : 0

  for (let i = start; i < this.length; i++) {
    accumulator =+ callback(accumulator, this[i], i, this)
  }

  return accumulator;
};
